package ann

import (
	"testing"
)

func TestSetWeights(t *testing.T) {

	defer func() {
		if r := recover(); r == nil {
			t.Fatalf("Recovered expected but got no panic")
		}
	}()

	nn := NewPerceptron(3, 5, 3)

	// The length of weights is set to an incorrect value.
	weights := make([]float64, nn.GetWeightsLen()-1)

	nn.MustSetWeights(weights)
}

var nnbp = []float64{3.5160783381534, -2.3902606289939228, -2.152499363027632, -0.44337151167720706, 0.8226541103099444, 1.3815329145786182, -3.1576281267909936, 2.5953330762507685, 2.507073266690611, -0.42406179772926317, 7.034165236533734, 7.12978520484844, 1.5771377222120426, -1.6372547912849365, -1.2843295971430708, 1.9903168150273587, 0.6174440179589991, 0.3523661570477517, -0.18580960820356096, 3.0299735759479782, 3.9564233842157854, 3.1063890495752284, -2.0099199082188473, -2.0746220692452537, -0.8485603830898351, 2.369955359227498, 1.9703330634524605, -0.23030041878550636, 5.468730107547309, 4.9826722016170475, -0.38290485876739677, 4.5802605888328936, -1.4728676268843024, -1.1739826285851052, 0.7803999505636829, 2.3445969472066666, -0.12877183069320763, -0.3147884285846357, 4.277502576560991, -1.6540871699317512, -0.08342774623330282, 0.979031589660323, 0.5283968365743884, 0.6129645397050616, 0.3246731458316136, 1.0216449031074406, 0.73709577568676, 0.5996289644512901, 1.0221253371535453, 0.96334453848726, -0.17486452077675796, 1.0211287273899416, 0.4722572682290521, 0.5071438271991168, 0.2848132326040605, 0.9306072477449046, 0.3654677814118729, 0.3883098897816378, 0.5534429201928504, 0.5281513904841993, 0.4650252089369866, 0.5285142462326272, 0.9687046818088801, 0.3329887013876316, 0.6123883375671277, 0.6653059624899901, 0.056775901937989266, -0.5070915113372062, 0.41764189377619493, 0.9457160980110482, 1.026538667561677, 0.2413284029994347, 0.7166310247208241, 0.9312050418421477, -1.381495371784787, -2.3396058330862712, -0.9583678876611401, 3.1763231112489727, 3.2066877929170507, -0.6872311331596435, -1.437882768086923, 0.8207748631014701, -1.3628625856371075, 0.8864775998903851, 1.9423158108680316, 0.09503890989982132, 1.0771560128729418, 0.08417236608099611, 0.2612490979844103, -2.0063096697762206, 0.35660405580944693, 0.13076430579446002, -0.5939576417921925, 1.4184400024398374, -0.5973608970214346, -1.2200135646157437, -3.1306885528794686, -3.0407854295154295, -0.3456096570380117, 3.289186746860089, 3.567553729947386, -1.4970334070301172, -2.064136239739717, 1.1616144642346458, -2.2821460791867496, 1.360668691644496, 2.216835370904625, -1.949614442429336, -4.144373239220894, 1.1167495771747926, 2.6228846427517896, 7.851674291732568, -2.3567879263200133, -0.2732556875712425, 4.504911488202426, -2.4390090511839166, 3.5984186760268653, 6.354078293779421, 0.4882780993712929, 0.718086961519045, 0.8539833766490899, 1.0213648206931152, 0.26656172468913814, 0.29317770685949357, 0.38545955516212366, 0.5737528195093071, 0.4860356529539186, 1.0798357888413244, 0.3306511936740563, -0.05209385407856222, 1.2311256975313976, -0.03212386709803537, 0.6017706326068579, -1.1795865708784363, 0.9629075459960276, -0.3317597920353095, -0.7173298918713045, 0.41206761798006236, -0.011563657200322227, -1.0161462808688835, 0.3630476344776482, -5.430392283504762, 0.39362435665901757, 0.41479239891142416, 0.49009265546331743, -3.6387222357411946, -3.201701943723665, -5.733909625212192, 8.592405909560444, 0.6321811110878321, -2.564430919607553, -0.4882323455908467, -3.6561375215132026, -0.28115762657894455, -0.8466990984649541, 0.14253280944433977, -11.940514676699776, 1.0495944192106859, 8.424766152650127, 8.872838799301228, 0.013816785109645428, 0.2991229872750763}

const nnbpTolerance = 1.0

// Compute function
func TestCosineSine(t *testing.T) {
	nn := NewPerceptron(2, 10, 10, 2)

	nn.MustSetWeights(nnbp)

	x := make([]float64, 2)
	y := make([]float64, 2)

	var totalError float64

	for i, sin := range sinTable {
		x[0] = sin.X
		y[0] = sin.Y
		x[1], y[1] = cosTable[i].x, cosTable[i].y

		_, cError := nn.ComputeError(x, y)
		totalError += cError
	}
	if totalError > nnbpTolerance {
		t.Fatalf("Sine and Cosine neural network function exceeds tolerance on the data set, total error: %f\n", totalError)
	}

}

// test ES algorithm, best individual before back-propagation
var nnga = []float64{-0.0700874840312734, 0.18568744350330446, 0.423448709469562, 0.7584789359206705, 0.04337086973684956, 0.6022496740055174, 0.4148141269208024, 0.8099975669129034, 0.7217377573527566, 0.18437651678336456, 0.4154529828930167, 0.5110729512076975, 0.5009904110860199, 0.20727879433162644, 0.5602039884734836, 0.8970397542385938, 0.8463559819564408, 0.5812781210451952, 0.5066479095727459, 0.0735501917321788, 1, 0.4525468520118413, 0.13137577227678993, 0.06667361125036962, 0.5114041142488525, 0.4511542342010964, 0.05153193842603666, -0.03219467301482348, 0.8180541751269277, 0.33199626919673075, 0.2198537553328071, 1, 0.03289827955629476, 0.5663253985233783, 0.48737522126420973, 0.419632480473176, 0.5401107519865819, 0.9492254991979097, 1, 0.359344334981502, 0.23439787736217052, 1, 0.5767554379615085, 0.6224078973098739, 0.305391501211817, 1, 0.7620331800136576, 0.6205560811529045, 1, 1, -0.19758357050375097, 1, 0.7065188835542883, 0.6859939445224293, 0.4274934851134451, 0.9260259257126269, 0.3793577321121595, 0.5384920719435567, 0.7436756400624551, 0.5937696111012019, 0.6297665086978943, 0.5904947261092238, 1, 0.3273308602297577, 0.6840876681769875, 0.6671741048416229, 0.10879342201627128, -0.4776515197960604, 0.47254581033583504, 0.9793528778751662, 1, 0.2999657200452353, 0.6807352069101793, 0.9393138129765046, 0.4385360128155176, 0.35379667707037077, 0.07028597177541673, 0.7915366637359995, 1, 0.3190262932465412, -0.16072626559274064, 0.6586446200694448, 0.5727641680292485, 0.6979064980879307, 0.7484697402393727, 0.4928825016648941, 0.5513879184159984, 0.7489647470244982, 0.39069646940996133, 0.2351453215772165, 0.17537874643331422, 0.5729508382477746, 0.723942871892525, 1, 0.4276450064652313, 0.41301752803597036, -0.01999561176137063, -0.42818441660924805, 0.4105109257853292, 0.47562428698102466, 0.6668571519598955, -0.03283148947187986, -0.4756700691554605, 0.20734363845846837, 0.13961190313464011, 0.5571077702564713, 0.1601440828067009, -0.09303461020399341, -0.45385157094035733, 1, 0.27935259197751766, 0.005186361525400751, 0.2021725950123365, 1, 0.9489655332471398, 0.6932710695532354, 0.8273876524395477, 1, 0.4677410229281986, 0.7979554071802495, 0.8338378737631653, 1, 0.2072893302231697, 0.32812350025189085, 0.3937977416128563, 0.4976761831343763, 0.5402475119185668, 1, 0.27380554251524064, 0.6426828170047508, 0.95482262926972, 0.6685938294947875, 0.5650861380189409, 0.2118414365450768, 1, 0.33313026846975186, 0.14763528325605463, 0.20077399849840116, 0.644311306441103, 0.016272212321772478, 0.7296415131011815, 0.1221439784617808, 0.7364848059242659, 0.4306393980832098, 1, 0.5254170006418036, 0.10165832530858157, 0.053194431236340545, 1, 1, 0.3209805694261497, 0.06286492448609052, 0.11061660461849451, 0.39617490065723815, -0.013172759972698539, 0.7965611516810904, -0.17994631851245468, 0.867553428129451, 0.6503667014658223, 0.309783635561816, 0.7596524758201835, 0.3925879250107408}

func TestBackPropagation(t *testing.T) {
	nn := NewPerceptron(2, 10, 10, 2)

	x := make([]float64, 2)
	y := make([]float64, 2)

	nn.MustSetWeights(nnga)

	for step := 0; step < 10000; step++ {

		for i, sin := range sinTable {
			x[0] = sin.X
			y[0] = sin.Y
			x[1], y[1] = cosTable[i].x, cosTable[i].y

			nn.Compute(x)
			nn.BackPropagation(y)
		}
	}

	// Compare computed and expected weights after back-propagation
	isEqual := true
	for i, w := range nn.GetWeights() {
		if nnbp[i] != w {
			isEqual = false
		}
	}

	if !isEqual {
		t.Fatalf("Back-propagation failed\n")
	}
}

func BenchmarkCompute(b *testing.B) {

	nn := NewPerceptron(3, 5, 5, 3)

	for i := 0; i < b.N; i++ {
		nn.Compute([]float64{0.5, 0.5, 0.5})
	}
}
